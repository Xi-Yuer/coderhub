services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: coderhub
      MYSQL_ROOT_PASSWORD: 2214380963Wx!!
    ports:
      - "3306:3306"
    networks:
      - coderhub-network
    volumes:
      - type: volume
        source: mysql-data
        target: /var/lib/mysql
  elasticsearch:
    image: elasticsearch:8.11.3
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=2214380963Wx!! # 设置明确的密码
    depends_on:
      - mysql
    volumes:
      - type: volume
        source: es-data
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - coderhub-network
    ulimits:
      memlock:
        soft: -1
        hard: -1

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.3-arm64
    platform: linux/arm64
    container_name: logstash
    depends_on:
      - elasticsearch
      - mysql
    environment:
      - XPACK_MONITORING_ENABLED=false
      - "LS_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
      - type: bind
        source: ./logstash/lib/mysql-connector-java-8.0.28.jar
        target: /usr/share/logstash/mysql-connector-java-8.0.28.jar
    networks:
      - coderhub-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - coderhub-network
    volumes:
      - redis-data:/data

  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: etcd
    networks:
      - coderhub-network
    command:
      [
        "etcd",
        "--name",
        "etcd0",
        "--advertise-client-urls",
        "http://0.0.0.0:2379",
        "--listen-client-urls",
        "http://0.0.0.0:2379",
        "--initial-advertise-peer-urls",
        "http://0.0.0.0:2380",
        "--listen-peer-urls",
        "http://0.0.0.0:2380",
        "--initial-cluster",
        "etcd0=http://0.0.0.0:2380",
      ]

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      service:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - coderhub-network
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
        consistency: consistent
  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000" # MinIO 服务端口
      - "9001:9001" # MinIO 控制面板端口
    environment:
      MINIO_ROOT_USER: "minioadmin" # 设置管理员用户名
      MINIO_ROOT_PASSWORD: "minioadmin" # 设置管理员密码（生产环境请使用强密码）
    volumes:
      - minio-data:/data # 使用 Docker 卷来持久化数据
      - ./minio/config:/root/.minio # 持久化 MinIO 配置
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - coderhub-network
  #  Api 服务
  api:
    image: 2214380963/api:latest
    container_name: api
    depends_on:
      - etcd
      - mysql
      - redis
      - service
    networks:
      - coderhub-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/api/coderhub/health" ] # 修改为实际的健康检查端点
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always

  service:
    image: 2214380963/service:latest
    container_name: service
    depends_on:
      - mysql
      - redis
      - etcd
    networks:
      - coderhub-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8888" ] # 使用netcat检查端口是否开放
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ETCD_HOST: etcd
      ETCD_PORT: 2379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306

  web:
    image: 2214380963/coderhub-web:latest
    container_name: web
    depends_on:
      - api
      - service
    networks:
      - coderhub-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
      restart: always

networks:
  coderhub-network:
    driver: bridge # 使用默认的 Docker bridge 网络驱动

volumes:
  etcd-data:
  mysql-data:
  redis-data:
  es-data:
  minio-data:
