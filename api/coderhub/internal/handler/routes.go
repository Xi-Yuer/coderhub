// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package handler

import (
	"net/http"

	academic_auth "coderhub/api/coderhub/internal/handler/academic_auth"
	academic_public "coderhub/api/coderhub/internal/handler/academic_public"
	articles_auth "coderhub/api/coderhub/internal/handler/articles_auth"
	articles_public "coderhub/api/coderhub/internal/handler/articles_public"
	coderhub "coderhub/api/coderhub/internal/handler/coderhub"
	comments_auth "coderhub/api/coderhub/internal/handler/comments_auth"
	favorites_auth "coderhub/api/coderhub/internal/handler/favorites_auth"
	favorites_public "coderhub/api/coderhub/internal/handler/favorites_public"
	follow_auth "coderhub/api/coderhub/internal/handler/follow_auth"
	follow_public "coderhub/api/coderhub/internal/handler/follow_public"
	image_auth "coderhub/api/coderhub/internal/handler/image_auth"
	questions_auth "coderhub/api/coderhub/internal/handler/questions_auth"
	questions_public "coderhub/api/coderhub/internal/handler/questions_public"
	user_auth "coderhub/api/coderhub/internal/handler/user_auth"
	user_public "coderhub/api/coderhub/internal/handler/user_public"
	"coderhub/api/coderhub/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 新增学术导航
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: academic_auth.AddAcademicNavigatorHandler(serverCtx),
			},
			{
				// 删除学术导航
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: academic_auth.DeleteAcademicNavigatorHandler(serverCtx),
			},
			{
				// 取消点赞学术导航
				Method:  http.MethodDelete,
				Path:    "/dislike/:id",
				Handler: academic_auth.CancelLikeAcademicNavigatorHandler(serverCtx),
			},
			{
				// 点赞学术导航
				Method:  http.MethodPost,
				Path:    "/like/:id",
				Handler: academic_auth.PostAcademicNavigatorLikeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/academic_navigator"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取学术导航
				Method:  http.MethodGet,
				Path:    "/get",
				Handler: academic_public.GetAcademicNavigatorHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/academic_navigator"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 更新文章
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: articles_auth.UpdateArticleHandler(serverCtx),
			},
			{
				// 删除文章
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: articles_auth.DeleteArticleHandler(serverCtx),
			},
			{
				// 创建文章
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: articles_auth.CreateArticleHandler(serverCtx),
			},
			{
				// 更新文章点赞数
				Method:  http.MethodPost,
				Path:    "/update_like_count",
				Handler: articles_auth.UpdateLikeCountHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/articles"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取文章
				Method:  http.MethodGet,
				Path:    "/detail/:id",
				Handler: articles_public.GetArticleHandler(serverCtx),
			},
			{
				// 获取文章列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: articles_public.GetArticlesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/articles"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 健康检查
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: coderhub.AcademicHealthHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/coderhub"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取单个评论
				Method:  http.MethodGet,
				Path:    "/:comment_id",
				Handler: comments_auth.GetCommentHandler(serverCtx),
			},
			{
				// 删除评论
				Method:  http.MethodDelete,
				Path:    "/:comment_id",
				Handler: comments_auth.DeleteCommentHandler(serverCtx),
			},
			{
				// 获取评论列表
				Method:  http.MethodGet,
				Path:    "/article/:entity_id",
				Handler: comments_auth.GetCommentsHandler(serverCtx),
			},
			{
				// 创建评论
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: comments_auth.CreateCommentHandler(serverCtx),
			},
			{
				// 获取某条评论的子评论列表
				Method:  http.MethodGet,
				Path:    "/replies/:comment_id",
				Handler: comments_auth.GetCommentRepliesHandler(serverCtx),
			},
			{
				// 更新评论点赞数
				Method:  http.MethodPost,
				Path:    "/update_like_count",
				Handler: comments_auth.UpdateCommentLikeCountHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/comments"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 更新收藏夹
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: favorites_auth.UpdateFavoriteHandler(serverCtx),
			},
			{
				// 删除收藏夹
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: favorites_auth.DeleteFavoriteHandler(serverCtx),
			},
			{
				// 添加收藏内容
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: favorites_auth.AddFavoriteContentHandler(serverCtx),
			},
			{
				// 删除收藏夹内容
				Method:  http.MethodDelete,
				Path:    "/content/:id",
				Handler: favorites_auth.DeleteFavoriteContentHandler(serverCtx),
			},
			{
				// 创建收藏夹
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: favorites_auth.CreateFavoriteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/favorites"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取收藏内容列表
				Method:  http.MethodGet,
				Path:    "/content_list",
				Handler: favorites_public.ListFavoriteContentHandler(serverCtx),
			},
			{
				// 获取收藏夹列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: favorites_public.ListFavoriteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/favorites"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 关注用户
				Method:  http.MethodPost,
				Path:    "/follow",
				Handler: follow_auth.FollowUserHandler(serverCtx),
			},
			{
				// 取消关注
				Method:  http.MethodPost,
				Path:    "/unfollow",
				Handler: follow_auth.UnfollowUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/follow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取粉丝列表
				Method:  http.MethodGet,
				Path:    "/fans",
				Handler: follow_public.GetFansListHandler(serverCtx),
			},
			{
				// 获取关注列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: follow_public.GetFollowListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/follow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 删除图片
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: image_auth.DeleteHandler(serverCtx),
			},
			{
				// 获取图片信息
				Method:  http.MethodGet,
				Path:    "/get/:image_id",
				Handler: image_auth.GetHandler(serverCtx),
			},
			{
				// 获取用户图片列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: image_auth.ListByUserHandler(serverCtx),
			},
			{
				// 上传图片
				Method:  http.MethodPost,
				Path:    "/upload",
				Handler: image_auth.UploadHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/image"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 删除题库
				Method:  http.MethodDelete,
				Path:    "/bank/:id",
				Handler: questions_auth.DeleteQuestionBankHandler(serverCtx),
			},
			{
				// 创建题库
				Method:  http.MethodPost,
				Path:    "/bank/create",
				Handler: questions_auth.CreateQuestionBankHandler(serverCtx),
			},
			{
				// 删除题目
				Method:  http.MethodDelete,
				Path:    "/question/:id",
				Handler: questions_auth.DeleteQuestionHandler(serverCtx),
			},
			{
				// 创建题目
				Method:  http.MethodPost,
				Path:    "/question/create",
				Handler: questions_auth.CreateQuestionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/questions"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取题库列表
				Method:  http.MethodGet,
				Path:    "/bank_list",
				Handler: questions_public.ListQuestionBanksHandler(serverCtx),
			},
			{
				// 获取题目详情
				Method:  http.MethodGet,
				Path:    "/question/:id",
				Handler: questions_public.GetQuestionBankHandler(serverCtx),
			},
			{
				// 获取题目列表
				Method:  http.MethodGet,
				Path:    "/question_list",
				Handler: questions_public.ListQuestionsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/questions"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 修改密码
				Method:  http.MethodPost,
				Path:    "/change_password",
				Handler: user_auth.ChangePasswordHandler(serverCtx),
			},
			{
				// 删除用户
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: user_auth.DeleteUserHandler(serverCtx),
			},
			{
				// 根据用户的token获取用户信息
				Method:  http.MethodGet,
				Path:    "/info_by_token",
				Handler: user_auth.GetUserInfoByTokenHandler(serverCtx),
			},
			{
				// 更新用户信息
				Method:  http.MethodPut,
				Path:    "/update/:id",
				Handler: user_auth.UpdateUserInfoHandler(serverCtx),
			},
			{
				// 更新用户头像
				Method:  http.MethodPut,
				Path:    "/update_avatar",
				Handler: user_auth.UpdateUserAvatarHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取用户信息
				Method:  http.MethodGet,
				Path:    "/info/:id",
				Handler: user_public.GetUserInfoHandler(serverCtx),
			},
			{
				// 获取用户列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: user_public.GetUserListHandler(serverCtx),
			},
			{
				// 用户登录
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: user_public.LoginHandler(serverCtx),
			},
			{
				// 用户注册
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: user_public.RegisterHandler(serverCtx),
			},
			{
				// 通过链接重置密码
				Method:  http.MethodPost,
				Path:    "/reset-password-by-link",
				Handler: user_public.ResetPasswordByLinkHandler(serverCtx),
			},
			{
				// 发送重置密码链接
				Method:  http.MethodPost,
				Path:    "/send-reset-password-link",
				Handler: user_public.SendResetPasswordLinkHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/user"),
	)
}
